// This file is part of meshoptimizer library and is distributed under the terms of MIT License.
// Copyright (C) 2016-2025, by Arseny Kapoulkine (arseny.kapoulkine@gmail.com)
var MeshoptSimplifier = (function () {
	'use strict';
	// Built with clang version 19.1.5-wasi-sdk
	// Built from meshoptimizer 0.24
	var wasm =
		'b9H79Tebbbe:Gez9Geueu9Geub9Gbb9Gsuuuuuuuuuuuu99uueu9Gvuuuuub9Gruuuuuuub9Gouuuuuue999Gvuuuuueu9Gquuuuuuu99uueu9GPuuuuuuuuuuu99uueu9Gquuuuuuuu99ueu9Gruuuuuu99eu9Gwuuuuuu99ueu9Giuuue999Gluuuueu9GiuuueuiXCdilvorlwiDqkxmPbssbelve9Weiiviebeoweuec:G:Pdkr;7eko9TW9T9VV95dbH9F9F939H79T9F9J9H229F9Jt9VV7bbz9TW79O9V9Wt9F79P9T9W29P9M95br8E9TW79O9V9Wt9F79P9T9W29P9M959x9Pt9OcttV9P9I91tW7bw8A9TW79O9V9Wt9F79P9T9W29P9M959x9Pt9O9v9W9K9HtWbDQ9TW79O9V9Wt9F79P9T9W29P9M959t29V9W9W95bqX9TW79O9V9Wt9F79P9T9W29P9M959qV919UWbkQ9TW79O9V9Wt9F79P9T9W29P9M959q9V9P9Ut7bxX9TW79O9V9Wt9F79P9T9W29P9M959t9J9H2Wbma9TW79O9V9Wt9F9V9Wt9P9T9P96W9wWVtW94SWt9J9O9sW9T9H9WbPl79IV9RbsDwebcekdOAq:B;MeCdbk:7:geoYue99duE99Que9:8Jjjjjbcj;sb9Rgs8Kjjjjbcbhzasc:Cefcbc;Kbz:rjjjb8AdnabaeSmbabaeadcdtz:qjjjb8AkdnamcdGTmbalcrfci4gHcbyd1:jjjbHjjjjbbheasc:Cefasyd;8egOcdtfaeBdbasaOcefBd;8eaecbaHz:rjjjbhAcbhlcbhednadTmbcbhlabheadhHinaAaeydbgOci4fgCaCRbbgCceaOcrGgOtV86bbaCcu7aO4ceGalfhlaeclfheaHcufgHmbkcualcdtalcFFFFi0Ehekaecbyd1:jjjbHjjjjbbhzasc:Cefasyd;8egecdtfazBdbasaecefBd;8ealcd4alfhOcehHinaHgecethHaeaO6mbkcbhXcuaecdtgOaecFFFFi0Ecbyd1:jjjbHjjjjbbhHasc:Cefasyd;8egCcdtfaHBdbasaCcefBd;8eaHcFeaOz:rjjjbhQdnadTmbaecufhLcbhKindndnaQabaXcdtfgYydbgCc:v;t;h;Ev2aLGgOcdtfgAydbgHcuSmbceheinazaHcdtfydbaCSmdaOaefhHaecefheaQaHaLGgOcdtfgAydbgHcu9hmbkkazaKcdtfaCBdbaAaKBdbaKhHaKcefhKkaYaHBdbaXcefgXad9hmbkkaQcbyd:m:jjjbH:bjjjbbasasyd;8ecufBd;8ekcbh8AcualcefgecdtaecFFFFi0Ecbyd1:jjjbHjjjjbbhEasc:Cefasyd;8egecdtfaEBdbasaEBdNeasaecefBd;8ecuadcitadcFFFFe0Ecbyd1:jjjbHjjjjbbh3asc:Cefasyd;8egecdtfa3Bdbasa3Bd:yeasaecefBd;8eascNefabadalcbz:cjjjbcualcdtgealcFFFFi0Eg5cbyd1:jjjbHjjjjbbhCasc:Cefasyd;8egHcdtfaCBdbasaHcefBd;8ea5cbyd1:jjjbHjjjjbbh8Easc:Cefasyd;8egHcdtfa8EBdbasaHcefBd;8eaCa8Eaialavazasc:Cefz:djjjbalcbyd1:jjjbHjjjjbbhAasc:Cefasyd;8egHcdtfaABdbasaHcefBd;8ea5cbyd1:jjjbHjjjjbbhHasc:Cefasyd;8egOcdtfaHBdbasaOcefBd;8ea5cbyd1:jjjbHjjjjbbhOasc:Cefasyd;8egQcdtfaOBdbasaQcefBd;8eaHcFeaez:rjjjbh8FaOcFeaez:rjjjbhadnalTmba3cwfhhindnaEa8AgOcefg8AcdtfydbgQaEaOcdtgefydbgHSmbaQaH9Rhga3aHcitfh8Jaaaefh8Ka8FaefhYcbhLindndna8JaLcitfydbgKaO9hmbaYaOBdba8KaOBdbxekdnaEaKcdtg8LfgeclfydbgHaeydbgeSmba3aecitgQfydbaOSmeaHae9Rh8Maecu7aHfhXahaQfhHcbheinaXaeSmeaecefheaHydbhQaHcwfhHaQaO9hmbkaea8M6mekaaa8LfgeaOaKaeydbcuSEBdbaYaKaOaYydbcuSEBdbkaLcefgLag9hmbkka8Aal9hmbkaChHa8EhOaahQa8FhLcbheindndnaeaHydbgK9hmbdnaeaOydbgK9hmbaLydbhKdnaQydbgXcu9hmbaKcu9hmbaAaefcb86bbxikdnaXcuSmbaKcuSmbaeaXSmbaCaXcdtfydbaCaKcdtfydb9hmbaAaefcd86bbxikaAaefhYdnaeaXSmbaeaKSmbaYce86bbxikaYcl86bbxdkdnaea8EaKcdtgXfydb9hmbdnaQydbgYcuSmbaeaYSmbaLydbggcuSmbaeagSmbaaaXfydbg8JcuSmba8JaKSmba8FaXfydbgXcuSmbaXaKSmbdnaCaYcdtfydbgKaCaXcdtfydb9hmbaKaCagcdtfydbgXSmbaXaCa8Jcdtfydb9hmbaAaefcd86bbxlkaAaefcl86bbxikaAaefcl86bbxdkaAaefcl86bbxekaAaefaAaKfRbb86bbkaHclfhHaOclfhOaQclfhQaLclfhLalaecefge9hmbkdnamcaGTmbdnaqmbdndnazTmbaAhealhHxekaAhealhHindndnaeRbbc9:fPibebekaeci86bbkaecefheaHcufgHmbxikkindndnaeRbbc9:fPibebekaeci86bbkaecefheaHcufgHTmdxbkkdnazTmbcbhOindndnaAaOfgQRbbgLc9:fPibebekcbheaOhHinaeaqazaHcdtgHfydbfRbbcdGce4Vhea8EaHfydbgHaO9hmbkaQaLciaeceGE86bbkaOcefgOal9hmbxdkkcbhOindndnaAaOfgQRbbgLc9:fPibebekcbhHaOheinaHaqaefRbbcdGce4VhHa8EaecdtfydbgeaO9hmbkaQaLciaHceGE86bbkaOcefgOal9hmbkkdnaqTmbcbheazhHaChQinaehOdnazTmbaHydbhOkdnaqaOfRbbceGTmbaAaQydbfcl86bbkaHclfhHaQclfhQalaecefge9hmbkaChealhOaAhHindnaAaeydbfRbbcl9hmbaHcl86bbkaeclfheaHcefhHaOcufgOmbkkamceGTmbaAhealhHindnaeRbbce9hmbaecl86bbkaecefheaHcufgHmbkkcbh8Ncualcx2alc;v:Q;v:Qe0Ecbyd1:jjjbHjjjjbbh8Masc:Cefasyd;8egecdtfa8MBdbasaecefBd;8easc:qefcbBdbas9cb83i1ea8Maialavazasc1efz:ejjjbhydndnaDmbcbh8PcbhqxekcbhqawhecbhHindnaeIdbJbbbb9ETmbasaqcdtfaHBdbaqcefhqkaeclfheaDaHcefgH9hmbkcuaqal2gecdtaecFFFFi0Ecbyd1:jjjbHjjjjbbh8Pasc:Cefasyd;8egecdtfa8PBdbasaecefBd;8ealTmbdnaqmbcbhqxekarcd4hYdnazTmbaqcdthgcbhKa8PhXinaoazaKcdtfydbaY2cdtfhLasheaXhHaqhOinaHaLaeydbcdtgQfIdbawaQfIdbNUdbaeclfheaHclfhHaOcufgOmbkaXagfhXaKcefgKal9hmbxdkkaqcdthgcbhKa8PhXinaoaKaY2cdtfhLasheaXhHaqhOinaHaLaeydbcdtgQfIdbawaQfIdbNUdbaeclfheaHclfhHaOcufgOmbkaXagfhXaKcefgKal9hmbkkcualc8S2gHalc;D;O;f8U0EgQcbyd1:jjjbHjjjjbbheasc:Cefasyd;8egOcdtfaeBdbasaOcefBd;8eaecbaHz:rjjjbhIcbhDcbhhdnaqTmbcbh8NaQcbyd1:jjjbHjjjjbbhhasc:Cefasyd;8egecdtfahBdbasaecefBd;8eahcbaHz:rjjjb8Acuaqal2gecltgHaecFFFFb0Ecbyd1:jjjbHjjjjbbhDasc:Cefasyd;8egecdtfaDBdbasaecefBd;8eaDcbaHz:rjjjb8AamcjjjjdGTmbcualcltgealcFFFFb0Ecbyd1:jjjbHjjjjbbh8Nasc:Cefasyd;8egHcdtfa8NBdbasaHcefBd;8ea8Ncbaez:rjjjb8AkdnadTmbcbhLabhHina8MaHclfydbgKcx2fgeIdba8MaHydbgXcx2fgOIdbg8R:tg8Sa8MaHcwfydbgYcx2fgQIdlaOIdlgR:tg8UNaQIdba8R:tg8VaeIdlaR:tg8WN:tg8Xh8YaeIdwaOIdwg8Z:tg80a8VNaQIdwa8Z:tg81a8SN:tgBh8Va8Wa81Na8Ua80N:tg8Wh8Sdna8Xa8XNa8Wa8WNaBaBNMM:rg80Jbbbb9EgOTmba8Xa80:vh8YaBa80:vh8Va8Wa80:vh8SkaIaCaXcdtfydbgQc8S2fgea8Sa80:rg8Ua8SNNg83aeIdbMUdbaea8Va8Ua8VNgUNg85aeIdlMUdlaea8Ya8Ua8YNg81Ng86aeIdwMUdwaeaUa8SNgUaeIdxMUdxaea81a8SNg87aeIdzMUdzaea81a8VNg88aeIdCMUdCaea8Sa8Ua8Ya8ZNa8Sa8RNaRa8VNMM:mg89Ng81Ng8SaeIdKMUdKaea8Va81Ng8VaeId3MUd3aea8Ya81Ng8YaeIdaMUdaaea81a89Ng81aeId8KMUd8Kaea8UaeIdyMUdyaIaCaKcdtfydbgKc8S2fgea83aeIdbMUdbaea85aeIdlMUdlaea86aeIdwMUdwaeaUaeIdxMUdxaea87aeIdzMUdzaea88aeIdCMUdCaea8SaeIdKMUdKaea8VaeId3MUd3aea8YaeIdaMUdaaea81aeId8KMUd8Kaea8UaeIdyMUdyaIaCaYcdtfydbgXc8S2fgea83aeIdbMUdbaea85aeIdlMUdlaea86aeIdwMUdwaeaUaeIdxMUdxaea87aeIdzMUdzaea88aeIdCMUdCaea8SaeIdKMUdKaea8VaeId3MUd3aea8YaeIdaMUdaaea81aeId8KMUd8Kaea8UaeIdyMUdydna8NTmbdnaOTmba8Xa80:vh8XaBa80:vhBa8Wa80:vh8Wka8NaQcltfgea80JbbbZNg8SaBNg8UaeIdlMUdlaea8Sa8XNg8VaeIdwMUdwaea8Sa8WNg8YaeIdbMUdbaea8Sa8R:ma8WNaBaRN:ta8Za8XN:tNg8SaeIdxMUdxa8NaKcltfgea8UaeIdlMUdlaea8VaeIdwMUdwaea8YaeIdbMUdbaea8SaeIdxMUdxa8NaXcltfgea8UaeIdlMUdlaea8VaeIdwMUdwaea8YaeIdbMUdbaea8SaeIdxMUdxkaHcxfhHaLcifgLad6mbkkdnalTmbJ;n;m;m89J:v:;;w8ZamczGEh8WcbhOaChQa8MhHaIheindnaOaQydb9hmbaecxfgLaLIdbJbbbbMUdbaeczfgLaLIdbJbbbbMUdbaecCfgLaLIdbJbbbbMUdbaea8WaecyfgLIdbg8XNg8SaeIdbMUdbaeclfgKa8SaKIdbMUdbaecwfgKa8SaKIdbMUdbaecKfgKaKIdbaHIdbg8Va8SN:tUdbaHcwfIdbh8Uaec3fgKaKIdba8SaHclfIdbg8YN:tUdbaecafgKaKIdba8Sa8UN:tUdbaec8KfgKIdbhBaLa8Xa8SMUdbaKaBa8Sa8Ua8UNa8Va8VNa8Ya8YNMMNMUdbkaQclfhQaHcxfhHaec8SfhealaOcefgO9hmbkkdnadTmbcbhYabhXinabaYcdtfhKcbhHinaAaKaHc:G1jjbfydbcdtfydbgOfRbbhedndnaAaXaHfydbgQfRbbgLc99fcFeGcpe0mbaec99fcFeGc;:e6mekdnaLcufcFeGce0mba8FaQcdtfydbaO9hmekdnaecufcFeGce0mbaaaOcdtfydbaQ9hmekJbbacJbbacJbbbZaecFeGceSEaLcFeGceSEh86a8MaOcx2fgeIdwa8MaQcx2fgLIdwg80:tg8Y:mhUaeIdlaLIdlg81:tg8X:mh87aeIdbaLIdbg8R:tgB:mh88dna8MaKaHc:K1jjbfydbcdtfydbcx2fgeIdwa80:tgRa8Ya8YNaBaBNa8Xa8XNMMg8WNaRa8YNaeIdba8R:tg8ZaBNa8XaeIdla81:tg83NMMg8Ua8YN:tg8Va8VNa8Za8WNa8UaBN:tg8Sa8SNa83a8WNa8Ua8XN:tg8Ua8UNMM:rg85Jbbbb9ETmba8Va85:vh8Va8Ua85:vh8Ua8Sa85:vh8Ska86a8W:rNg8Wa8Va80Na8Sa8RNa81a8UNMM:mg89Ng85a89Nh89a8Va85Nh8:a8Ua85NhZa8Sa85Nhna8Wa8VNg85a8UNhca85a8SNh9ca8Wa8UNgJa8SNh9ea8Va85Nh85a8UaJNhJa8Sa8Wa8SNNhTdnaBa83Na8Za87NMg8Va8VNa8XaRNa83aUNMg8Sa8SNa8Ya8ZNaRa88NMg8Ua8UNMM:rg8YJbbbb9ETmba8Va8Y:vh8Va8Ua8Y:vh8Ua8Sa8Y:vh8SkaIaCaQcdtfydbc8S2fgeaeIdbaTa8Sa86a8Y:rNg8Ya8SNNMgBMUdbaeaJa8Ua8Ya8UNgRNMg8ZaeIdlMUdlaea85a8Va8Ya8VNg8XNMg83aeIdwMUdwaea9eaRa8SNMgRaeIdxMUdxaea9ca8Xa8SNMg85aeIdzMUdzaeaca8Xa8UNMg8XaeIdCMUdCaeana8Sa8Ya8Va80Na8Sa8RNa81a8UNMMg80:mNg8YNMg8SaeIdKMUdKaeaZa8Ua8YNMg8UaeId3MUd3aea8:a8Va8YNMg8VaeIdaMUdaaea89a80a8YN:tg8YaeId8KMUd8Kaea8WJbbbbMg8WaeIdyMUdyaIaCaOcdtfydbc8S2fgeaBaeIdbMUdbaea8ZaeIdlMUdlaea83aeIdwMUdwaeaRaeIdxMUdxaea85aeIdzMUdzaea8XaeIdCMUdCaea8SaeIdKMUdKaea8UaeId3MUd3aea8VaeIdaMUdaaea8YaeId8KMUd8Kaea8WaeIdyMUdykaHclfgHcx9hmbkaXcxfhXaYcifgYad6mbkaqTmbcbhXinJbbbbh8Wa8MabaXcdtfgeclfydbgYcx2fgHIdwa8Maeydbggcx2fgOIdwg8Z:tg8Ua8UNaHIdbaOIdbg83:tg8Va8VNaHIdlaOIdlg85:tg8Ya8YNMMg8Ra8Maecwfydbg8Jcx2fgeIdwa8Z:tg8XNa8Ua8Ua8XNa8VaeIdba83:tgBNa8YaeIdla85:tg80NMMg8SN:tJbbbbJbbjZa8Ra8Xa8XNaBaBNa80a80NMMgRNa8Sa8SN:tg81:va81Jbbbb9BEg81Nh87aRa8UNa8Xa8SN:ta81Nh88a8Ra80Na8Ya8SN:ta81Nh89aRa8YNa80a8SN:ta81Nh8:a8RaBNa8Va8SN:ta81NhZaRa8VNaBa8SN:ta81Nhna8Va80NaBa8YN:tg8Sa8SNa8Ya8XNa80a8UN:tg8Sa8SNa8UaBNa8Xa8VN:tg8Sa8SNMM:rJbbbZNh8Sa8Pagaq2g8LcdtfhHa8Pa8Jaq2gEcdtfhOa8PaYaq2g8KcdtfhQa8Z:mhca85:mh9ca83:mhJcbhLaqhKJbbbbh80Jbbbbh81Jbbbbh8RJbbbbhRJbbbbh8ZJbbbbh83Jbbbbh85Jbbbbh86JbbbbhUinascjdfaLfgecwfa8Sa88aQIdbaHIdbg8X:tg8YNa87aOIdba8X:tgBNMg8UNUdbaeclfa8Sa8:a8YNa89aBNMg8VNUdbaea8Sana8YNaZaBNMg8YNUdbaecxfa8Saca8UNa9ca8VNa8XaJa8YNMMMg8XNUdba8Sa8Ua8VNNaRMhRa8Sa8Ua8YNNa8ZMh8Za8Sa8Va8YNNa83Mh83a8Sa8Xa8XNNa8WMh8Wa8Sa8Ua8XNNa80Mh80a8Sa8Va8XNNa81Mh81a8Sa8Ya8XNNa8RMh8Ra8Sa8Ua8UNNa85Mh85a8Sa8Va8VNNa86Mh86a8Sa8Ya8YNNaUMhUaHclfhHaQclfhQaOclfhOaLczfhLaKcufgKmbkahagc8S2fgeaUaeIdbMUdbaea86aeIdlMUdlaea85aeIdwMUdwaea83aeIdxMUdxaea8ZaeIdzMUdzaeaRaeIdCMUdCaea8RaeIdKMUdKaea81aeId3MUd3aea80aeIdaMUdaaea8WaeId8KMUd8Kaea8SaeIdyMUdyahaYc8S2fgeaUaeIdbMUdbaea86aeIdlMUdlaea85aeIdwMUdwaea83aeIdxMUdxaea8ZaeIdzMUdzaeaRaeIdCMUdCaea8RaeIdKMUdKaea81aeId3MUd3aea80aeIdaMUdaaea8WaeId8KMUd8Kaea8SaeIdyMUdyaha8Jc8S2fgeaUaeIdbMUdbaea86aeIdlMUdlaea85aeIdwMUdwaea83aeIdxMUdxaea8ZaeIdzMUdzaeaRaeIdCMUdCaea8RaeIdKMUdKaea81aeId3MUd3aea80aeIdaMUdaaea8WaeId8KMUd8Kaea8SaeIdyMUdyaDa8LcltfhKcbhHaqhQinaKaHfgeascjdfaHfgOIdbaeIdbMUdbaeclfgLaOclfIdbaLIdbMUdbaecwfgLaOcwfIdbaLIdbMUdbaecxfgeaOcxfIdbaeIdbMUdbaHczfhHaQcufgQmbkaDa8KcltfhKcbhHaqhQinaKaHfgeascjdfaHfgOIdbaeIdbMUdbaeclfgLaOclfIdbaLIdbMUdbaecwfgLaOcwfIdbaLIdbMUdbaecxfgeaOcxfIdbaeIdbMUdbaHczfhHaQcufgQmbkaDaEcltfhKcbhHaqhQinaKaHfgeascjdfaHfgOIdbaeIdbMUdbaeclfgLaOclfIdbaLIdbMUdbaecwfgLaOcwfIdbaLIdbMUdbaecxfgeaOcxfIdbaeIdbMUdbaHczfhHaQcufgQmbkaXcifgXad6mbkkcbhOdndnamcwGgSmbJbbbbh83cbh9hcbh9icbh6xekcbh9ha5cbyd1:jjjbHjjjjbbh6asc:Cefasyd;8egecdtfa6BdbasaecefBd;8ecua6alabadaCz:fjjjbgQcltaQcjjjjiGEcbyd1:jjjbHjjjjbbh9iasc:Cefasyd;8egecdtfa9iBdbasaecefBd;8ea9iaQa6a8Malz:gjjjbJFFuuh83aQTmba9iheaQhHinaeIdbg8Sa83a83a8S9EEh83aeclfheaHcufgHmbkaQh9hkasydNeh9kdnalTmba9kclfhea9kydbhQaAhHalhLcbhOincbaeydbgKaQ9RaHRbbcpeGEaOfhOaHcefhHaeclfheaKhQaLcufgLmbkaOce4hOkcuadaO9Rcifg0cx2a0c;v:Q;v:Qe0Ecbyd1:jjjbHjjjjbbh9masc:Cefasyd;8egecdtfa9mBdbasaecefBd;8ecua0cdta0cFFFFi0Ecbyd1:jjjbHjjjjbbh9nasc:Cefasyd;8egecdtfa9nBdbasaecefBd;8ea5cbyd1:jjjbHjjjjbbh5asc:Cefasyd;8egecdtfa5BdbasaecefBd;8ealcbyd1:jjjbHjjjjbbh9oasc:Cefasyd;8egecdtfa9oBdbasaecefBd;8eaxaxNayJbbjZamclGEg8:a8:N:vh86JbbbbhUdnadak9nmbdna0ci6mbasyd:yeh9paqclth9qa9mcwfh9rJbbbbh85JbbbbhUinascNefabadalaCz:cjjjbabhgcbh8Acbh9sinaba9scdtfh8LcbheindnaCagaefydbgOcdtgYfydbgQaCa8Laec:W1jjbfydbcdtfydbgHcdtg8JfydbgLSmbaAaHfRbbgXcv2aAaOfRbbgKfc;a1jjbfRbbg8KaKcv2aXfgEc;a1jjbfRbbg3VcFeGTmbdnaLaQ9nmbaEc;G1jjbfRbbcFeGmekdnaKcufcFeGce0mbaXTmba8FaYfydbaH9hmekdnaKTmbaXcufcFeGce0mbaaa8JfydbaO9hmeka9ma8Acx2fgQaHaOa3cFeGgLEBdlaQaOaHaLEBdbaQaLa8KGcb9hBdwa8Acefh8Akaeclfgecx9hmbkdna9scifg9sad9pmbagcxfhga8Acifa09nmekka8ATmdcbh8JinaIaCa9ma8Jcx2fgXydbgLcdtgQfydbc8S2fgeIdwa8MaXydlgKcx2fgHIdwg8VNaeIdzaHIdbg8YNaeIdaMg8Sa8SMMa8VNaeIdlaHIdlg8XNaeIdCa8VNaeId3Mg8Sa8SMMa8XNaeIdba8YNaeIdxa8XNaeIdKMg8Sa8SMMa8YNaeId8KMMM:lh8SJbbbbJbbjZaeIdyg8U:va8UJbbbb9BEh8UdndnaXydwggmbJFFuuh8ZxekJbbbbJbbjZaIaCaKcdtfydbc8S2fgeIdygB:vaBJbbbb9BEaeIdwa8MaLcx2fgHIdwgBNaeIdzaHIdbg8WNaeIdaMg80a80MMaBNaeIdlaHIdlg80NaeIdCaBNaeId3MgBaBMMa80NaeIdba8WNaeIdxa80NaeIdKMgBaBMMa8WNaeId8KMMM:lNh8Zka8Ua8SNhRdnaqTmbahaLc8S2fgHIdwa8VNaHIdza8YNaHIdaMg8Sa8SMMa8VNaHIdla8XNaHIdCa8VNaHId3Mg8Sa8SMMa8XNaHIdba8YNaHIdxa8XNaHIdKMg8Sa8SMMa8YNaHId8KMMMh8SaDaLaq2g8LcltfheaHIdyhBa8PaKaq2gEcdtfgYhHaqhOinaHIdbg8Ua8UaBNaecxfIdba8VaecwfIdbNa8YaeIdbNa8XaeclfIdbNMMMg8Ua8UM:tNa8SMh8SaHclfhHaeczfheaOcufgOmbkdndnagmbJbbbbh8UxekahaKc8S2fgOIdwa8MaLcx2fgeIdwg8WNaOIdzaeIdbg80NaOIdaMg8Ua8UMMa8WNaOIdlaeIdlg81NaOIdCa8WNaOId3Mg8Ua8UMMa81NaOIdba80NaOIdxa81NaOIdKMg8Ua8UMMa80NaOId8KMMMh8Ua8Pa8LcdtfhHaDaEcltfheaOIdyh8RaqhOinaHIdbgBaBa8RNaecxfIdba8WaecwfIdbNa80aeIdbNa81aeclfIdbNMMMgBaBM:tNa8UMh8UaHclfhHaeczfheaOcufgOmbka8U:lh8UkaRa8S:lMhRa8Za8UMh8ZdndndnaAaLfRbbc9:fPdbedkdnaaa8Fa8FaQfydbaKSEa8EaQfydbgYcdtfydbgQcu9hmba8EaKcdtfydbhQkahaYc8S2fgOIdwa8MaQcx2fgeIdwg8VNaOIdzaeIdbg8YNaOIdaMg8Sa8SMMa8VNaOIdlaeIdlg8XNaOIdCa8VNaOId3Mg8Sa8SMMa8XNaOIdba8YNaOIdxa8XNaOIdKMg8Sa8SMMa8YNaOId8KMMMh8Sa8PaQaq2g8LcdtfhHaDaYaq2gEcltfheaOIdyhBaqhOinaHIdbg8Ua8UaBNaecxfIdba8VaecwfIdbNa8YaeIdbNa8XaeclfIdbNMMMg8Ua8UM:tNa8SMh8SaHclfhHaeczfheaOcufgOmbkdndnagmbJbbbbh8UxekahaQc8S2fgOIdwa8MaYcx2fgeIdwg8YNaOIdzaeIdbg8XNaOIdaMg8Ua8UMMa8YNaOIdlaeIdlgBNaOIdCa8YNaOId3Mg8Ua8UMMaBNaOIdba8XNaOIdxaBNaOIdKMg8Ua8UMMa8XNaOId8KMMMh8Ua8PaEcdtfhHaDa8LcltfheaOIdyh8WaqhOinaHIdbg8Va8Va8WNaecxfIdba8YaecwfIdbNa8XaeIdbNaBaeclfIdbNMMMg8Va8VM:tNa8UMh8UaHclfhHaeczfheaOcufgOmbka8U:lh8UkaRa8S:lMhRa8Za8UMh8Zxdka8EaQfydbgQaLSmbinahaQc8S2fgHIdwa8VNaHIdza8YNaHIdaMg8Sa8SMMa8VNaHIdla8XNaHIdCa8VNaHId3Mg8Sa8SMMa8XNaHIdba8YNaHIdxa8XNaHIdKMg8Sa8SMMa8YNaHId8KMMMh8SaDaQaq2cltfheaHIdyhBaYhHaqhOinaHIdbg8Ua8UaBNaecxfIdba8VaecwfIdbNa8YaeIdbNa8XaeclfIdbNMMMg8Ua8UM:tNa8SMh8SaHclfhHaeczfheaOcufgOmbkaRa8S:lMhRa8EaQcdtfydbgQaL9hmbkkaAaKfRbbci9hmbagTmba8EaKcdtfydbgQaKSmba8Pa8LcdtfhYa8MaLcx2fgeIdbh8VaeIdwh8YaeIdlh8XinahaQc8S2fgHIdwa8YNaHIdza8VNaHIdaMg8Sa8SMMa8YNaHIdla8XNaHIdCa8YNaHId3Mg8Sa8SMMa8XNaHIdba8VNaHIdxa8XNaHIdKMg8Sa8SMMa8VNaHId8KMMMh8SaDaQaq2cltfheaHIdyhBaYhHaqhOinaHIdbg8Ua8UaBNaecxfIdba8YaecwfIdbNa8VaeIdbNa8XaeclfIdbNMMMg8Ua8UM:tNa8SMh8SaHclfhHaeczfheaOcufgOmbka8Za8S:lMh8Za8EaQcdtfydbgQaK9hmbkkaXa8ZaRa8ZaR9DgeEUdwaXaLaKaeagcb9hGgeEBdlaXaKaLaeEBdba8Jcefg8Ja8A9hmbkascjdfcbcj;qbz:rjjjb8Aa9rhea8AhHinascjdfaeydbcA4cF8FGgOcFAaOcFA6EcdtfgOaOydbcefBdbaecxfheaHcufgHmbkcbhecbhHinascjdfaefgOydbhQaOaHBdbaQaHfhHaeclfgecj;qb9hmbkcbhea9rhHinascjdfaHydbcA4cF8FGgOcFAaOcFA6EcdtfgOaOydbgOcefBdba9naOcdtfaeBdbaHcxfhHa8Aaecefge9hmbkadak9RgOci9Uh9tdnalTmbcbhea5hHinaHaeBdbaHclfhHalaecefge9hmbkkcbh9ua9ocbalz:rjjjbh9saOcO9Uh9va9tce4h9wcbh3cbh8Kdnina9ma9na8Kcdtfydbcx2fgEIdwg8Sa869Emea3a9t9pmeJFFuuh8Udna9wa8A9pmba9ma9na9wcdtfydbcx2fIdwJbb;aZNh8Ukdna8Sa8U9ETmba8SaU9ETmba3a9v0mdkdna9saCaEydlg8Jcdtg9xfydbgQfg9yRbba9saCaEydbggcdtg9zfydbgefg9ARbbVmbaAagfRbbh9Bdna9kaecdtfgHclfydbgOaHydbgHSmbaOaH9RhLa8MaQcx2fhXa8Maecx2fhYa9paHcitfhecbhHceh8Ldnindna5aeydbcdtfydbgOaQSmba5aeclfydbcdtfydbgKaQSmbaOaKSmba8MaKcx2fgKIdba8MaOcx2fgOIdbg8V:tg8SaYIdlaOIdlg8Y:tg8WNaYIdba8V:tg80aKIdla8Y:tg8UN:tg8Xa8SaXIdla8Y:tg81NaXIdba8V:tg8Ra8UN:tg8YNa8UaYIdwaOIdwgB:tgRNa8WaKIdwaB:tg8VN:tg8Wa8UaXIdwaB:tg8ZNa81a8VN:tg8UNa8Va80NaRa8SN:tgBa8Va8RNa8Za8SN:tg8SNMMa8Xa8XNa8Wa8WNaBaBNMMa8Ya8YNa8Ua8UNa8Sa8SNMMN:rJbbj8:N9FmdkaecwfheaHcefgHaL6h8LaLaH9hmbkka8LceGTmba9wcefh9wxekdndndndna9Bc9:fPdebdkagheina5aecdtgefa8JBdba8Eaefydbgeag9hmbxikkdnaaa8Fa8Fa9zfydba8JSEa8Ea9zfydbggcdtfydbgecu9hmba8Ea9xfydbheka5a9zfa8JBdbaeh8Jka5agcdtfa8JBdbka9Ace86bba9yce86bbaEIdwg8SaUaUa8S9DEhUa9ucefh9ucecda9BceSEa3fh3ka8Kcefg8Ka8A9hmbkka9uTmddnalTmbcbhKcbhYindna5aYcdtgefydbgOaYSmbaCaOcdtfydbhgdnaYaCaefydb9hg8JmbaIagc8S2fgeaIaYc8S2fgHIdbaeIdbMUdbaeaHIdlaeIdlMUdlaeaHIdwaeIdwMUdwaeaHIdxaeIdxMUdxaeaHIdzaeIdzMUdzaeaHIdCaeIdCMUdCaeaHIdKaeIdKMUdKaeaHId3aeId3MUd3aeaHIdaaeIdaMUdaaeaHId8KaeId8KMUd8KaeaHIdyaeIdyMUdya8NTmba8Nagcltfgea8NaYcltfgHIdbaeIdbMUdbaeaHIdlaeIdlMUdlaeaHIdwaeIdwMUdwaeaHIdxaeIdxMUdxkaqTmbahaOc8S2fgeahaYc8S2g8LfgHIdbaeIdbMUdbaeaHIdlaeIdlMUdlaeaHIdwaeIdwMUdwaeaHIdxaeIdxMUdxaeaHIdzaeIdzMUdzaeaHIdCaeIdCMUdCaeaHIdKaeIdKMUdKaeaHId3aeId3MUd3aeaHIdaaeIdaMUdaaeaHId8KaeId8KMUd8KaeaHIdyaeIdyMUdya9qaO2hXaDhHaqhQinaHaXfgeaHaKfgOIdbaeIdbMUdbaeclfgLaOclfIdbaLIdbMUdbaecwfgLaOcwfIdbaLIdbMUdbaecxfgeaOcxfIdbaeIdbMUdbaHczfhHaQcufgQmbka8JmbJbbbbJbbjZaIa8LfgeIdyg8S:va8SJbbbb9BEaeIdwa8Magcx2fgHIdwg8SNaeIdzaHIdbg8UNaeIdaMg8Va8VMMa8SNaeIdlaHIdlg8VNaeIdCa8SNaeId3Mg8Sa8SMMa8VNaeIdba8UNaeIdxa8VNaeIdKMg8Sa8SMMa8UNaeId8KMMM:lNg8Sa85a85a8S9DEh85kaKa9qfhKaYcefgYal9hmbkcbhHa8FheindnaeydbgOcuSmbdnaHa5aOcdtgQfydbgO9hmbcuhOa8FaQfydbgQcuSmba5aQcdtfydbhOkaeaOBdbkaeclfhealaHcefgH9hmbkcbhHaaheindnaeydbgOcuSmbdnaHa5aOcdtgQfydbgO9hmbcuhOaaaQfydbgQcuSmba5aQcdtfydbhOkaeaOBdbkaeclfhealaHcefgH9hmbkka85aUaqEh85cbhHabhecbhOindnaCa5aeydbcdtfydbgKcdtfydbgQaCa5aeclfydbcdtfydbgXcdtfydbgLSmbaQaCa5aecwfydbcdtfydbggcdtfydbgYSmbaLaYSmbabaHcdtfgQaKBdbaQcwfagBdbaQclfaXBdbaHcifhHkaecxfheaOcifgOad6mbkdndnaSmbaHhdxekdnaHak0mbaHhdxekdna83a859FmbaHhdxekJFFuuh83cbhdabhecbhOindna9ia6aeydbgQcdtfydbcdtfIdbg8Sa859ETmbaeclf8Pdbh9CabadcdtfgLaQBdbaLclfa9C83dba8Sa83a83a8S9EEh83adcifhdkaecxfheaOcifgOaH6mbkkadak0mbxdkkascNefabadalaCz:cjjjbkdndnadak0mbadhOxekdnaSmbadhOxekdna83a869FmbadhOxekcehKina83Jbb;aZNg8Sa86a8Sa869DEh8VJbbbbh8Sdna9hTmba9ihea9hhHinaeIdbg8Ua8Sa8Ua8V9FEa8Sa8Ua8S9EEh8SaeclfheaHcufgHmbkkJFFuuh83cbhOabhecbhHindna9ia6aeydbgQcdtfydbcdtfIdbg8Ua8V9ETmbaeclf8Pdbh9CabaOcdtfgLaQBdbaLclfa9C83dba8Ua83a83a8U9EEh83aOcifhOkaecxfheaHcifgHad6mbkdnaKaOad9hVceGmbadhOxdka8SaUaUa8S9DEhUaOak9nmecbhKaOhda83a869FmbkkdnamcjjjjdGTmba9ocbalz:rjjjbhKdnaOTmbabheaOhHinaKaeydbgQfaAaQfRbbcl9h86bbaeclfheaHcufgHmbkkascNefabaOalaCz:cjjjbalTmbcbhLasyd:yeh8LindnaKaLfRbbTmbdnaAaLfRbbgecl0mbceaetcQGmekdnaCaLcdtgXfydbgeaLSmba8MaLcx2fgHa8Maecx2fge8Pdb83dbaHcwfaecwfydbBdbxekaIaLc8S2fgeIdyg8Sa8SJL:3;rUNg8SMh86aeIdwa8SMh8RaeIdla8SMhRaeIdba8SMhBaeIdaa8Sa8MaLcx2fggIdwg87N:th8ZaeId3a8SagIdlg88N:th83aeIdKagIdbg89a8SN:th8WJbbbbhZaeIdCJbbbbMh85aeIdzJbbbbMh80aeIdxJbbbbMh81dndnaqTmbaLhQinJbbbba86ahaQc8S2fgHIdyg8S:va8SJbbbb9BEh8SaDaQaq2cltfheaHIdaa86Na8ZMh8ZaHId3a86Na83Mh83aHIdKa86Na8WMh8WaHIdCa86Na85Mh85aHIdza86Na80Mh80aHIdxa86Na81Mh81aHIdwa86Na8RMh8RaHIdla86NaRMhRaHIdba86NaBMhBaqhHina8ZaecxfIdbg8XaecwfIdbg8UNa8SN:th8Za83a8XaeclfIdbg8VNa8SN:th83a85a8Ua8VNa8SN:th85aBaeIdbg8Ya8YNa8SN:thBa8Wa8Xa8YNa8SN:th8Wa80a8Ua8YNa8SN:th80a81a8Va8YNa8SN:th81a8Ra8Ua8UNa8SN:th8RaRa8Va8VNa8SN:thRaeczfheaHcufgHmbka8EaQcdtfydbgQaL9hmbka8NTmba8NaLcltfgeIdxhJaeIdwhnaeIdlhcaeIdbh8SxekJbbbbhJJbbbbhnJbbbbhcJbbbbh8Ska80aB:vg8Va8WNa8Z:ta85a80a81aB:vg8UN:tg8ZaRa81a8UN:tg8X:vg8Ya8Ua8WNa83:tgRN:th83ana8Sa8VN:taca8Sa8UN:tg81a8YN:tg85a8Ra80a8VN:ta8Za8YN:tg80:vg8R:mh8Za81a8X:vgn:mhcdnJbbbba8Sa8SaB:vg9cN:ta81anN:ta85a8RN:tg81:la86J:983:g81Ng8S9ETmba8Za83NacaRNa9ca8WNaJ:tMMa81:vhZkaB:la8S9ETmba8X:la8S9ETmba80:la8S9ETmba9c:maZNa8V:ma8ZaZNa83a80:vMg83Na8U:macaZNa8Y:ma83NaRa8X:vMMg85Na8W:maB:vMMMh86a9kaXfgeclfydbgHaeydbge9RhYa8LaecitfhXJbbbbh8SdnaHaeSg8JmbJbbbbh8SaXheaYhQina8Maeclfydbcx2fgHIdwa87:tg8Ua8UNaHIdba89:tg8Ua8UNaHIdla88:tg8Ua8UNMMg8Ua8Maeydbcx2fgHIdwa87:tg8Va8VNaHIdba89:tg8Va8VNaHIdla88:tg8Va8VNMMg8Va8Sa8Sa8V9DEg8Sa8Sa8U9DEh8SaecwfheaQcufgQmbkka83a87:tg8Ua8UNa86a89:tg8Ua8UNa85a88:tg8Ua8UNMMa8S:rg8Sa8SN9Embdna8JmbcbhQceh8Jdnina8MaXclfydbcx2fgeIdba8MaXydbcx2fgHIdbg8V:tg8Sa88aHIdlg8Y:tg8WNa89a8V:tg80aeIdla8Y:tg8UN:tg8Xa8Sa85a8Y:tg81Na86a8V:tg8Ra8UN:tg8YNa8Ua87aHIdwgB:tgRNa8WaeIdwaB:tg8VN:tg8Wa8Ua83aB:tg8ZNa81a8VN:tg8UNa8Va80NaRa8SN:tgBa8Va8RNa8Za8SN:tg8SNMMa8Xa8XNa8Wa8WNaBaBNMMa8Ya8YNa8Ua8UNa8Sa8SNMMN:rJbbj8:N9FmeaXcwfhXaQcefgQaY6h8JaYaQ9hmbkka8JceGmekaga83Udwaga85Udlaga86UdbkaLcefgLal9hmbkdndnaqTmbaqclthgaqcdth8JcbhXa8PhYindnaKaXfRbbTmbaAaXfRbbclSmbJbbbbJbbjZahaXc8S2fIdyg8S:va8SJbbbb9BEh8Sa8MaCaXcdtfydbcx2fhHaDheaYhQaqhLinaQa8SaecwfIdbaHIdwNaeIdbaHIdbNaeclfIdbaHIdlNMMaecxfIdbMNUdbaeczfheaQclfhQaLcufgLmbkkaDagfhDaYa8JfhYaXcefgXal9hmbkarcd4hYavcd4hgasId:qeh8SasId:meh8UasId1eh8VazTmeaqcdth8JcbhXindnaKaXfRbbTmbaiazaXcdtfydbgCag2cdtfgea8MaXcx2fgHIdbayNa8VMUdbaeaHIdlayNa8UMUdlaeaHIdwayNa8SMUdwaoaCaY2cdtfhLashea8PhHaqhCinaLaeydbcdtgQfaHIdbawaQfIdb:vUdbaeclfheaHclfhHaCcufgCmbkka8Pa8Jfh8PaXcefgXal9hmbxikkavcd4hCasId:qeh8SasId:meh8UasId1eh8VdnazTmbazheindna9oRbbTmbaiaeydbaC2cdtfgHa8MIdbayNa8VMUdbaHa8MclfIdbayNa8UMUdlaHa8McwfIdbayNa8SMUdwka9ocefh9oaeclfhea8Mcxfh8MalcufglmbxikkaCcdtheindna9oRbbTmbaia8MIdbayNa8VMUdbaiclfa8MclfIdbayNa8UMUdbaicwfa8McwfIdbayNa8SMUdbka9ocefh9oa8Mcxfh8Maiaefhialcufglmbxdkkaqcdth8JcbhXindnaKaXfRbbTmbaiaXag2cdtfgea8MaXcx2fgHIdbayNa8VMUdbaeaHIdlayNa8UMUdlaeaHIdwayNa8SMUdwaoaXaY2cdtfhLashea8PhHaqhCinaLaeydbcdtgQfaHIdbawaQfIdb:vUdbaeclfheaHclfhHaCcufgCmbkka8Pa8Jfh8PaXcefgXal9hmbkkdnamcjjjjlGTmbazmbaOTmbcbhKabheinaAaeydbgQfRbbc3thXaecwfgYydbhHdndna8FaQcdtg8JfydbaeclfggydbgCSmbcbhLaaaCcdtfydbaQ9hmekcjjjj94hLkaeaXaLVaQVBdbaAaCfRbbc3thXdndna8FaCcdtfydbaHSmbcbhLaaaHcdtfydbaC9hmekcjjjj94hLkagaXaLVaCVBdbaAaHfRbbc3thLdndna8FaHcdtfydbaQSmbcbhCaaa8JfydbaH9hmekcjjjj94hCkaYaLaCVaHVBdbaecxfheaKcifgKaO6mbkkdnazTmbaOTmbaOheinabazabydbcdtfydbBdbabclfhbaecufgembkkdnaPTmbaPa8:aU:rNUdbkasyd;8egecdtasc:Ceffc98fhHdninaeTmeaHydbcbyd:m:jjjbH:bjjjbbaHc98fhHaecufhexbkkascj;sbf8KjjjjbaOk;Yieouabydlhvabydbclfcbaicdtz:rjjjbhoadci9UhrdnadTmbdnalTmbaehwadhDinaoalawydbcdtfydbcdtfgqaqydbcefBdbawclfhwaDcufgDmbxdkkaehwadhDinaoawydbcdtfgqaqydbcefBdbawclfhwaDcufgDmbkkdnaiTmbcbhDaohwinawydbhqawaDBdbawclfhwaqaDfhDaicufgimbkkdnadci6mbinaecwfydbhwaeclfydbhDaeydbhidnalTmbalawcdtfydbhwalaDcdtfydbhDalaicdtfydbhikavaoaicdtfgqydbcitfaDBdbavaqydbcitfawBdlaqaqydbcefBdbavaoaDcdtfgqydbcitfawBdbavaqydbcitfaiBdlaqaqydbcefBdbavaoawcdtfgwydbcitfaiBdbavawydbcitfaDBdlawawydbcefBdbaecxfhearcufgrmbkkabydbcbBdbk:todDue99aicd4aifhrcehwinawgDcethwaDar6mbkcuaDcdtgraDcFFFFi0Ecbyd1:jjjbHjjjjbbhwaoaoyd9GgqcefBd9GaoaqcdtfawBdbawcFearz:rjjjbhkdnaiTmbalcd4hlaDcufhxcbhminamhDdnavTmbavamcdtfydbhDkcbadaDal2cdtfgDydlgwawcjjjj94SEgwcH4aw7c:F:b:DD2cbaDydbgwawcjjjj94SEgwcH4aw7c;D;O:B8J27cbaDydwgDaDcjjjj94SEgDcH4aD7c:3F;N8N27axGhwamcdthPdndndnavTmbakawcdtfgrydbgDcuSmeadavaPfydbal2cdtfgsIdbhzcehqinaqhrdnadavaDcdtfydbal2cdtfgqIdbaz9CmbaqIdlasIdl9CmbaqIdwasIdw9BmlkarcefhqakawarfaxGgwcdtfgrydbgDcu9hmbxdkkakawcdtfgrydbgDcuSmbadamal2cdtfgsIdbhzcehqinaqhrdnadaDal2cdtfgqIdbaz9CmbaqIdlasIdl9CmbaqIdwasIdw9BmikarcefhqakawarfaxGgwcdtfgrydbgDcu9hmbkkaramBdbamhDkabaPfaDBdbamcefgmai9hmbkkakcbyd:m:jjjbH:bjjjbbaoaoyd9GcufBd9GdnaeTmbaiTmbcbhDaehwinawaDBdbawclfhwaiaDcefgD9hmbkcbhDaehwindnaDabydbgrSmbawaearcdtfgrydbBdbaraDBdbkawclfhwabclfhbaiaDcefgD9hmbkkk:hrdvuv998Jjjjjbca9Rgoczfcwfcbyd11jjbBdbaocb8Pdj1jjb83izaocwfcbydN1jjbBdbaocb8Pd:m1jjb83ibdnadTmbaicd4hrdnabmbdnalTmbcbhwinaealawcdtfydbar2cdtfhDcbhiinaoczfaifgqaDaifIdbgkaqIdbgxaxak9EEUdbaoaifgqakaqIdbgxaxak9DEUdbaiclfgicx9hmbkawcefgwad9hmbxikkarcdthwcbhDincbhiinaoczfaifgqaeaifIdbgkaqIdbgxaxak9EEUdbaoaifgqakaqIdbgxaxak9DEUdbaiclfgicx9hmbkaeawfheaDcefgDad9hmbxdkkdnalTmbcbhwinabawcx2fgiaealawcdtfydbar2cdtfgDIdbUdbaiaDIdlUdlaiaDIdwUdwcbhiinaoczfaifgqaDaifIdbgkaqIdbgxaxak9EEUdbaoaifgqakaqIdbgxaxak9DEUdbaiclfgicx9hmbkawcefgwad9hmbxdkkarcdthlcbhwaehDinabawcx2fgiaeawar2cdtfgqIdbUdbaiaqIdlUdlaiaqIdwUdwcbhiinaoczfaifgqaDaifIdbgkaqIdbgxaxak9EEUdbaoaifgqakaqIdbgxaxak9DEUdbaiclfgicx9hmbkaDalfhDawcefgwad9hmbkkJbbbbaoIdbaoIdzgx:tgkakJbbbb9DEgkaoIdlaoIdCgm:tgPaPak9DEgkaoIdwaoIdKgP:tgsasak9DEhsdnabTmbadTmbJbbbbJbbjZas:vasJbbbb9BEhkinabakabIdbax:tNUdbabclfgoakaoIdbam:tNUdbabcwfgoakaoIdbaP:tNUdbabcxfhbadcufgdmbkkdnavTmbavaPUdwavamUdlavaxUdbkask:ZlewudnaeTmbcbhvabhoinaoavBdbaoclfhoaeavcefgv9hmbkkdnaiTmbcbhrinadarcdtfhwcbhDinalawaDcdtgvc:G1jjbfydbcdtfydbcdtfydbhodnabalawavfydbcdtfydbgqcdtfgkydbgvaqSmbinakabavgqcdtfgxydbgvBdbaxhkaqav9hmbkkdnabaocdtfgkydbgvaoSmbinakabavgocdtfgxydbgvBdbaxhkaoav9hmbkkdnaqaoSmbabaqaoaqao0Ecdtfaqaoaqao6EBdbkaDcefgDci9hmbkarcifgrai6mbkkdnaembcbskcbhxindnalaxcdtgvfydbax9hmbaxhodnabavfgDydbgvaxSmbaDhqinaqabavgocdtfgkydbgvBdbakhqaoav9hmbkkaDaoBdbkaxcefgxae9hmbkcbhvabhocbhkindndnavalydbgq9hmbdnavaoydbgq9hmbaoakBdbakcefhkxdkaoabaqcdtfydbBdbxekaoabaqcdtfydbBdbkaoclfhoalclfhlaeavcefgv9hmbkakk;Jiilud99duabcbaecltz:rjjjbhvdnalTmbadhoaihralhwinarcwfIdbhDarclfIdbhqavaoydbcltfgkarIdbakIdbMUdbakclfgxaqaxIdbMUdbakcwfgxaDaxIdbMUdbakcxfgkakIdbJbbjZMUdbaoclfhoarcxfhrawcufgwmbkkdnaeTmbavhraehkinarcxfgoIdbhDaocbBdbararIdbJbbbbJbbjZaD:vaDJbbbb9BEgDNUdbarclfgoaDaoIdbNUdbarcwfgoaDaoIdbNUdbarczfhrakcufgkmbkkdnalTmbinavadydbcltfgrcxfgkaicwfIdbarcwfIdb:tgDaDNaiIdbarIdb:tgDaDNaiclfIdbarclfIdb:tgDaDNMMgDakIdbgqaqaD9DEUdbadclfhdaicxfhialcufglmbkkdnaeTmbavcxfhrinabarIdbUdbarczfhrabclfhbaecufgembkkk8MbabaeadaialavcbcbcbcbcbaoarawaDz:bjjjbk8MbabaeadaialavaoarawaDaqakaxamaPz:bjjjbkRbababaeadaialavaoarawaDaqakaxcjjjjdVamz:bjjjbk:p8Koque99due99iuq998Jjjjjbc;Wb9Rgq8Kjjjjbcbhkaqcxfcbc;Kbz:rjjjb8Aaqcualcx2alc;v:Q;v:Qe0Ecbyd1:jjjbHjjjjbbgxBdxaqceBd2axaialavcbcbz:ejjjb8AaqcualcdtalcFFFFi0Egmcbyd1:jjjbHjjjjbbgiBdzaqcdBd2dndnJFF959eJbbjZawJbbjZawJbbjZ9DE:vawJ9VO:d869DEgw:lJbbb9p9DTmbaw:OhPxekcjjjj94hPkadci9Uhsarco9UhzdndnaombaPcd9imekdnalTmbaPcuf:YhwdnaoTmbcbhvaihHaxhOindndnaoavfRbbceGTmbavcjjjjlVhAxekdndnaOclfIdbawNJbbbZMgC:lJbbb9p9DTmbaC:OhAxekcjjjj94hAkaAcqthAdndnaOcwfIdbawNJbbbZMgC:lJbbb9p9DTmbaC:OhXxekcjjjj94hXkaAaXVhAdndnaOIdbawNJbbbZMgC:lJbbb9p9DTmbaC:OhXxekcjjjj94hXkaAaXcCtVhAkaHaABdbaHclfhHaOcxfhOalavcefgv9hmbxdkkaxhvaihOalhHindndnavIdbawNJbbbZMgC:lJbbb9p9DTmbaC:OhAxekcjjjj94hAkaAcCthAdndnavclfIdbawNJbbbZMgC:lJbbb9p9DTmbaC:OhXxekcjjjj94hXkaXcqtaAVhAdndnavcwfIdbawNJbbbZMgC:lJbbb9p9DTmbaC:OhXxekcjjjj94hXkaOaAaXVBdbavcxfhvaOclfhOaHcufgHmbkkadTmbcbhkaehvcbhOinakaiavclfydbcdtfydbgHaiavcwfydbcdtfydbgA9haiavydbcdtfydbgXaH9haXaA9hGGfhkavcxfhvaOcifgOad6mbkkarci9UhQdndnaz:Z:rJbbbZMgw:lJbbb9p9DTmbaw:Ohvxekcjjjj94hvkaQ:ZhLcbhKc:bwhHdndninashYaHhXaPhrakg8AaQ9pmeaXar9Rcd9imeavaXcufavaX9iEarcefavar9kEhzdnalTmbazcuf:YhwdnaoTmbcbhOaihPaxhvindndnaoaOfRbbceGTmbaOcjjjjlVhHxekdndnavclfIdbawNJbbbZMgC:lJbbb9p9DTmbaC:OhHxekcjjjj94hHkaHcqthHdndnavcwfIdbawNJbbbZMgC:lJbbb9p9DTmbaC:Ohsxekcjjjj94hskaHasVhHdndnavIdbawNJbbbZMgC:lJbbb9p9DTmbaC:Ohsxekcjjjj94hskaHascCtVhHkaPaHBdbaPclfhPavcxfhvalaOcefgO9hmbxdkkaxhvaihOalhPindndnavIdbawNJbbbZMgC:lJbbb9p9DTmbaC:OhHxekcjjjj94hHkaHcCthHdndnavclfIdbawNJbbbZMgC:lJbbb9p9DTmbaC:Ohsxekcjjjj94hskascqtaHVhHdndnavcwfIdbawNJbbbZMgC:lJbbb9p9DTmbaC:Ohsxekcjjjj94hskaOaHasVBdbavcxfhvaOclfhOaPcufgPmbkkcbhOdnadTmbaehvcbhPinaOaiavclfydbcdtfydbgHaiavcwfydbcdtfydbgs9haiavydbcdtfydbgAaH9haAas9hGGfhOavcxfhvaPcifgPad6mbkkaYhsaOhkaXhHazhPdnaOaQ9nmbaOhsa8AhkazhHarhPkdndnaKcl0mbdnaY:Zgwa8A:ZgC:taz:YgEar:Y:tg3aEaX:Y:tg5aO:Zg8EaL:tNNNawaL:ta5NaCa8E:tNaCaL:ta3Na8Eaw:tNM:vaEMJbbbZMgw:lJbbb9p9DTmbaw:Ohvxdkcjjjj94hvxekaPaHfcd9ThvkaKcefgKcs9hmbxdkka8AhkarhPkdndndnakmbJbbjZhwcbhicdhvaDmexdkalcd4alfhHcehOinaOgvcethOavaH6mbkcbhOaqcuavcdtgravcFFFFi0Ecbyd1:jjjbHjjjjbbgzBdCaqciBd2aqamcbyd1:jjjbHjjjjbbgXBdKaqclBd2dndndndnalTmbaPcuf:YhwaoTmecbhOaihHaxhPindndnaoaOfRbbceGTmbaOcjjjjlVhsxekdndnaPclfIdbawNJbbbZMgC:lJbbb9p9DTmbaC:Ohsxekcjjjj94hskascqthsdndnaPcwfIdbawNJbbbZMgC:lJbbb9p9DTmbaC:OhAxekcjjjj94hAkasaAVhsdndnaPIdbawNJbbbZMgC:lJbbb9p9DTmbaC:OhAxekcjjjj94hAkasaAcCtVhskaHasBdbaHclfhHaPcxfhPalaOcefgO9hmbxikkazcFearz:rjjjb8AcbhrcbhvxdkaxhOaihPalhHindndnaOIdbawNJbbbZMgC:lJbbb9p9DTmbaC:Ohsxekcjjjj94hskascCthsdndnaOclfIdbawNJbbbZMgC:lJbbb9p9DTmbaC:OhAxekcjjjj94hAkaAcqtasVhsdndnaOcwfIdbawNJbbbZMgC:lJbbb9p9DTmbaC:OhAxekcjjjj94hAkaPasaAVBdbaOcxfhOaPclfhPaHcufgHmbkkazcFearz:rjjjbhAavcufhocbhrcbhzindndndnaAaiazcdtgKfydbgHcm4aH7c:v;t;h;Ev2gvcs4av7aoGgPcdtfgsydbgOcuSmbcehvinaiaOcdtgOfydbaHSmdaPavfhOavcefhvaAaOaoGgPcdtfgsydbgOcu9hmbkkasazBdbarhvarcefhrxekaXaOfydbhvkaXaKfavBdbazcefgzal9hmbkcuarc8S2gOarc;D;O;f8U0EhvkcbhAaqavcbyd1:jjjbHjjjjbbgvBd3aqcvBd2avcbaOz:rjjjbhOdnadTmbaehiinJbbnnJbbjZaXaiydbgHcdtfydbgvaXaiclfydbgPcdtfydbgzSavaXaicwfydbgscdtfydbgKSGgoEh8FdnaxaPcx2fgPIdbaxaHcx2fgHIdbg8E:tgCaxascx2fgsIdlaHIdlg3:tgwNasIdba8E:tgEaPIdla3:tgaN:tgLaLNaaasIdwaHIdwg5:tghNawaPIdwa5:tgaN:tgwawNaaaENahaCN:tgCaCNMM:rgEJbbbb9ETmbaLaE:vhLaCaE:vhCawaE:vhwkaOavc8S2fgvavIdbawa8FaE:rNgEawNNgaMUdbavaCaEaCNghNggavIdlMUdlavaLaEaLNg8FNg8JavIdwMUdwavahawNghavIdxMUdxava8FawNg8KavIdzMUdzava8FaCNg8FavIdCMUdCavawaEaLa5Nawa8ENa3aCNMM:mg3Ng8ENgwavIdKMUdKavaCa8ENgCavId3MUd3avaLa8ENgLavIdaMUdaava8Ea3Ng8EavId8KMUd8KavaEavIdyMUdydnaombaOazc8S2fgvaaavIdbMUdbavagavIdlMUdlava8JavIdwMUdwavahavIdxMUdxava8KavIdzMUdzava8FavIdCMUdCavawavIdKMUdKavaCavId3MUd3avaLavIdaMUdaava8EavId8KMUd8KavaEavIdyMUdyaOaKc8S2fgvaaavIdbMUdbavagavIdlMUdlava8JavIdwMUdwavahavIdxMUdxava8KavIdzMUdzava8FavIdCMUdCavawavIdKMUdKavaCavId3MUd3avaLavIdaMUdaava8EavId8KMUd8KavaEavIdyMUdykaicxfhiaAcifgAad6mbkkcbhHaqcuarcdtgvarcFFFFi0Egicbyd1:jjjbHjjjjbbgPBdaaqcoBd2aqaicbyd1:jjjbHjjjjbbgiBd8KaqcrBd2aPcFeavz:rjjjbhzdnalTmbaXhPinJbbbbJbbjZaOaPydbgsc8S2fgvIdygw:vawJbbbb9BEavIdwaxcwfIdbgwNavIdzaxIdbgCNavIdaMgLaLMMawNavIdlaxclfIdbgLNavIdCawNavId3MgwawMMaLNavIdbaCNavIdxaLNavIdKMgwawMMaCNavId8KMMM:lNhwdndnazascdtgvfgsydbcuSmbaiavfIdbaw9ETmekasaHBdbaiavfawUdbkaPclfhPaxcxfhxalaHcefgH9hmbkkJbbbbhwdnarTmbinaiIdbgCawawaC9DEhwaiclfhiarcufgrmbkkakcd4akfhOcehiinaigvcethiavaO6mbkcbhiaqcuavcdtgOavcFFFFi0Ecbyd1:jjjbHjjjjbbgPBdyaPcFeaOz:rjjjbhsdnadTmbavcufhAcbhrcbhxindnaXaeaxcdtfgvydbcdtfydbgiaXavclfydbcdtfydbgOSmbaiaXavcwfydbcdtfydbgvSmbaOavSmbazavcdtfydbhHdndnazaOcdtfydbgvazaicdtfydbgi9pmbavaH9pmbaHhlaihoavhHxekdnaHai9pmbaHav9pmbaihlavhoxekavhlaHhoaihHkabarcx2fgvaHBdbavcwfaoBdbavclfalBdbdnasaoc:3F;N8N2alc:F:b:DD27aHc;D;O:B8J27aAGgOcdtfgvydbgicuSmbcehPinaPhvdnabaicx2fgiydbaH9hmbaiydlal9hmbaiydwaoSmikavcefhPasaOavfaAGgOcdtfgvydbgicu9hmbkkavarBdbarcefhrkaxcifgxad6mbkarci2hikdnaDmbcwhvxdkaw:rhwcwhvkaDawUdbkavcdthvdninavTmeavc98fgvaqcxffydbcbyd:m:jjjbH:bjjjbbxbkkaqc;Wbf8Kjjjjbaik:2ldwue9:8Jjjjjbc;Wb9Rgr8Kjjjjbcbhwarcxfcbc;Kbz:rjjjb8AdnabaeSmbabaeadcdtz:qjjjb8AkarcualcdtalcFFFFi0EgDcbyd1:jjjbHjjjjbbgqBdxarceBd2aqcbaialavcbarcxfz:djjjbcualcx2alc;v:Q;v:Qe0Ecbyd1:jjjbHjjjjbbhkarcxfaryd2gxcdtgmfakBdbaraxcefgPBd2akaialavcbcbz:ejjjb8AarcxfaPcdtfaDcbyd1:jjjbHjjjjbbgvBdbaraxcdfgiBd2arcxfaicdtfcuavalaeadaqz:fjjjbgecltaecjjjjiGEcbyd1:jjjbHjjjjbbgiBdbaiaeavakalz:gjjjbdnadTmbaoaoNhocbhwabhlcbhkindnaiavalydbgecdtfydbcdtfIdbao9ETmbalclf8PdbhsabawcdtfgqaeBdbaqclfas83dbawcifhwkalcxfhlakcifgkad6mbkkaxcifhlamarcxffcwfhkdninalTmeakydbcbyd:m:jjjbH:bjjjbbakc98fhkalcufhlxbkkarc;Wbf8Kjjjjbawk:FCoDud99rue99iul998Jjjjjbc;Wb9Rgw8KjjjjbdndnarmbcbhDxekawcxfcbc;Kbz:rjjjb8Aawcuadcx2adc;v:Q;v:Qe0Ecbyd1:jjjbHjjjjbbgqBdxawceBd2aqaeadaicbcbz:ejjjb8AawcuadcdtadcFFFFi0Egkcbyd1:jjjbHjjjjbbgxBdzawcdBd2adcd4adfhmceheinaegicetheaiam6mbkcbhPawcuaicdtgsaicFFFFi0Ecbyd1:jjjbHjjjjbbgzBdCawciBd2dndnar:ZgH:rJbbbZMgO:lJbbb9p9DTmbaO:Ohexekcjjjj94hekaicufhAc:bwhmcbhCadhXcbhQinaChLaeamgKcufaeaK9iEaPgDcefaeaD9kEhYdndnadTmbaYcuf:YhOaqhiaxheadhmindndnaiIdbaONJbbbZMg8A:lJbbb9p9DTmba8A:OhCxekcjjjj94hCkaCcCthCdndnaiclfIdbaONJbbbZMg8A:lJbbb9p9DTmba8A:OhExekcjjjj94hEkaEcqtaCVhCdndnaicwfIdbaONJbbbZMg8A:lJbbb9p9DTmba8A:OhExekcjjjj94hEkaeaCaEVBdbaicxfhiaeclfheamcufgmmbkazcFeasz:rjjjbh3cbh5cbhPindna3axaPcdtfydbgCcm4aC7c:v;t;h;Ev2gics4ai7aAGgmcdtfgEydbgecuSmbaeaCSmbcehiina3amaifaAGgmcdtfgEydbgecuSmeaicefhiaeaC9hmbkkaEaCBdba5aecuSfh5aPcefgPad9hmbxdkkazcFeasz:rjjjb8Acbh5kaDaYa5ar0giEhPaLa5aiEhCdna5arSmbaYaKaiEgmaP9Rcd9imbdndnaQcl0mbdnaX:ZgOaL:Zg8A:taY:Yg8EaD:Y:tg8Fa8EaK:Y:tgaa5:ZghaH:tNNNaOaH:taaNa8Aah:tNa8AaH:ta8FNahaO:tNM:va8EMJbbbZMgO:lJbbb9p9DTmbaO:Ohexdkcjjjj94hexekaPamfcd9Theka5aXaiEhXaQcefgQcs9hmekkdndnaCmbcihicbhDxekcbhiawakcbyd1:jjjbHjjjjbbg5BdKawclBd2aPcuf:Yh8AdndnadTmbaqhiaxheadhmindndnaiIdba8ANJbbbZMgO:lJbbb9p9DTmbaO:OhCxekcjjjj94hCkaCcCthCdndnaiclfIdba8ANJbbbZMgO:lJbbb9p9DTmbaO:OhExekcjjjj94hEkaEcqtaCVhCdndnaicwfIdba8ANJbbbZMgO:lJbbb9p9DTmbaO:OhExekcjjjj94hEkaeaCaEVBdbaicxfhiaeclfheamcufgmmbkazcFeasz:rjjjbh3cbhDcbhYindndndna3axaYcdtgKfydbgCcm4aC7c:v;t;h;Ev2gics4ai7aAGgmcdtfgEydbgecuSmbcehiinaxaecdtgefydbaCSmdamaifheaicefhia3aeaAGgmcdtfgEydbgecu9hmbkkaEaYBdbaDhiaDcefhDxeka5aefydbhika5aKfaiBdbaYcefgYad9hmbkcuaDc32giaDc;j:KM;jb0EhexekazcFeasz:rjjjb8AcbhDcbhekawaecbyd1:jjjbHjjjjbbgeBd3awcvBd2aecbaiz:rjjjbhEavcd4hKdnadTmbdnalTmbaKcdth3a5hCaqhealhmadhAinaEaCydbc32fgiaeIdbaiIdbMUdbaiaeclfIdbaiIdlMUdlaiaecwfIdbaiIdwMUdwaiamIdbaiIdxMUdxaiamclfIdbaiIdzMUdzaiamcwfIdbaiIdCMUdCaiaiIdKJbbjZMUdKaCclfhCaecxfheama3fhmaAcufgAmbxdkka5hmaqheadhCinaEamydbc32fgiaeIdbaiIdbMUdbaiaeclfIdbaiIdlMUdlaiaecwfIdbaiIdwMUdwaiaiIdxJbbbbMUdxaiaiIdzJbbbbMUdzaiaiIdCJbbbbMUdCaiaiIdKJbbjZMUdKamclfhmaecxfheaCcufgCmbkkdnaDTmbaEhiaDheinaiaiIdbJbbbbJbbjZaicKfIdbgO:vaOJbbbb9BEgONUdbaiclfgmaOamIdbNUdbaicwfgmaOamIdbNUdbaicxfgmaOamIdbNUdbaiczfgmaOamIdbNUdbaicCfgmaOamIdbNUdbaic3fhiaecufgembkkcbhCawcuaDcdtgYaDcFFFFi0Egicbyd1:jjjbHjjjjbbgeBdaawcoBd2awaicbyd1:jjjbHjjjjbbg3Bd8KaecFeaYz:rjjjbhxdnadTmbJbbjZJbbjZa8A:vaPceSEaoNgOaONh8AaKcdthPalheina8Aaec;81jjbalEgmIdwaEa5ydbgAc32fgiIdC:tgOaONamIdbaiIdx:tgOaONamIdlaiIdz:tgOaONMMNaqcwfIdbaiIdw:tgOaONaqIdbaiIdb:tgOaONaqclfIdbaiIdl:tgOaONMMMhOdndnaxaAcdtgifgmydbcuSmba3aifIdbaO9ETmekamaCBdba3aifaOUdbka5clfh5aqcxfhqaeaPfheadaCcefgC9hmbkkabaxaYz:qjjjb8AcrhikaicdthiinaiTmeaic98fgiawcxffydbcbyd:m:jjjbH:bjjjbbxbkkawc;Wbf8KjjjjbaDk:Ydidui99ducbhi8Jjjjjbca9Rglczfcwfcbyd11jjbBdbalcb8Pdj1jjb83izalcwfcbydN1jjbBdbalcb8Pd:m1jjb83ibdndnaembJbbjFhvJbbjFhoJbbjFhrxekadcd4cdthwincbhdinalczfadfgDabadfIdbgvaDIdbgoaoav9EEUdbaladfgDavaDIdbgoaoav9DEUdbadclfgdcx9hmbkabawfhbaicefgiae9hmbkalIdwalIdK:thralIdlalIdC:thoalIdbalIdz:thvkJbbbbavavJbbbb9DEgvaoaoav9DEgvararav9DEk9DeeuabcFeaicdtz:rjjjbhlcbhbdnadTmbindnalaeydbcdtfgiydbcu9hmbaiabBdbabcefhbkaeclfheadcufgdmbkkabk9teiucbcbyd:q:jjjbgeabcifc98GfgbBd:q:jjjbdndnabZbcztgd9nmbcuhiabad9RcFFifcz4nbcuSmekaehikaik;teeeudndnaeabVciGTmbabhixekdndnadcz9pmbabhixekabhiinaiaeydbBdbaiaeydlBdlaiaeydwBdwaiaeydxBdxaeczfheaiczfhiadc9Wfgdcs0mbkkadcl6mbinaiaeydbBdbaeclfheaiclfhiadc98fgdci0mbkkdnadTmbinaiaeRbb86bbaicefhiaecefheadcufgdmbkkabk:3eedudndnabciGTmbabhixekaecFeGc:b:c:ew2hldndnadcz9pmbabhixekabhiinaialBdxaialBdwaialBdlaialBdbaiczfhiadc9Wfgdcs0mbkkadcl6mbinaialBdbaiclfhiadc98fgdci0mbkkdnadTmbinaiae86bbaicefhiadcufgdmbkkabk9teiucbcbyd:q:jjjbgeabcrfc94GfgbBd:q:jjjbdndnabZbcztgd9nmbcuhiabad9RcFFifcz4nbcuSmekaehikaik9:eiuZbhedndncbyd:q:jjjbgdaecztgi9nmbcuheadai9RcFFifcz4nbcuSmekadhekcbabae9Rcifc98Gcbyd:q:jjjbfgdBd:q:jjjbdnadZbcztge9nmbadae9RcFFifcz4nb8Akkk:Iedbcjwk1eFFuuFFuuFFuuFFuFFFuFFFuFbbbbbbbbebbbdbbbbbbbebbbebbbdbbbbbbbbbbbeeeeebebbebbebebbbeebbbbbbbbbbbbeeeeeebebbeeebeebbbbebebbbbbbbbbbbbbbbbbbc1Dkxebbbdbbb:GNbb'; // embed! wasm

	var wasmpack = new Uint8Array([
		32, 0, 65, 2, 1, 106, 34, 33, 3, 128, 11, 4, 13, 64, 6, 253, 10, 7, 15, 116, 127, 5, 8, 12, 40, 16, 19, 54, 20, 9, 27, 255, 113, 17, 42, 67,
		24, 23, 146, 148, 18, 14, 22, 45, 70, 69, 56, 114, 101, 21, 25, 63, 75, 136, 108, 28, 118, 29, 73, 115,
	]);

	if (typeof WebAssembly !== 'object') {
		return {
			supported: false,
		};
	}

	var instance;

	var ready = WebAssembly.instantiate(unpack(wasm), {}).then(function (result) {
		instance = result.instance;
		instance.exports.__wasm_call_ctors();
	});

	function unpack(data) {
		var result = new Uint8Array(data.length);
		for (var i = 0; i < data.length; ++i) {
			var ch = data.charCodeAt(i);
			result[i] = ch > 96 ? ch - 97 : ch > 64 ? ch - 39 : ch + 4;
		}
		var write = 0;
		for (var i = 0; i < data.length; ++i) {
			result[write++] = result[i] < 60 ? wasmpack[result[i]] : (result[i] - 60) * 64 + result[++i];
		}
		return result.buffer.slice(0, write);
	}

	function assert(cond) {
		if (!cond) {
			throw new Error('Assertion failed');
		}
	}

	function bytes(view) {
		return new Uint8Array(view.buffer, view.byteOffset, view.byteLength);
	}

	function reorder(fun, indices, vertices) {
		var sbrk = instance.exports.sbrk;
		var ip = sbrk(indices.length * 4);
		var rp = sbrk(vertices * 4);
		var heap = new Uint8Array(instance.exports.memory.buffer);
		var indices8 = bytes(indices);
		heap.set(indices8, ip);
		var unique = fun(rp, ip, indices.length, vertices);
		// heap may have grown
		heap = new Uint8Array(instance.exports.memory.buffer);
		var remap = new Uint32Array(vertices);
		new Uint8Array(remap.buffer).set(heap.subarray(rp, rp + vertices * 4));
		indices8.set(heap.subarray(ip, ip + indices.length * 4));
		sbrk(ip - sbrk(0));

		for (var i = 0; i < indices.length; ++i) indices[i] = remap[indices[i]];

		return [remap, unique];
	}

	function maxindex(source) {
		var result = 0;
		for (var i = 0; i < source.length; ++i) {
			var index = source[i];
			result = result < index ? index : result;
		}
		return result;
	}

	function simplify(fun, indices, index_count, vertex_positions, vertex_count, vertex_positions_stride, target_index_count, target_error, options) {
		var sbrk = instance.exports.sbrk;
		var te = sbrk(4);
		var ti = sbrk(index_count * 4);
		var sp = sbrk(vertex_count * vertex_positions_stride);
		var si = sbrk(index_count * 4);
		var heap = new Uint8Array(instance.exports.memory.buffer);
		heap.set(bytes(vertex_positions), sp);
		heap.set(bytes(indices), si);
		var result = fun(ti, si, index_count, sp, vertex_count, vertex_positions_stride, target_index_count, target_error, options, te);
		// heap may have grown
		heap = new Uint8Array(instance.exports.memory.buffer);
		var target = new Uint32Array(result);
		bytes(target).set(heap.subarray(ti, ti + result * 4));
		var error = new Float32Array(1);
		bytes(error).set(heap.subarray(te, te + 4));
		sbrk(te - sbrk(0));
		return [target, error[0]];
	}

	function simplifyAttr(
		fun,
		indices,
		index_count,
		vertex_positions,
		vertex_count,
		vertex_positions_stride,
		vertex_attributes,
		vertex_attributes_stride,
		attribute_weights,
		vertex_lock,
		target_index_count,
		target_error,
		options
	) {
		var sbrk = instance.exports.sbrk;
		var te = sbrk(4);
		var ti = sbrk(index_count * 4);
		var sp = sbrk(vertex_count * vertex_positions_stride);
		var sa = sbrk(vertex_count * vertex_attributes_stride);
		var sw = sbrk(attribute_weights.length * 4);
		var si = sbrk(index_count * 4);
		var vl = vertex_lock ? sbrk(vertex_count) : 0;
		var heap = new Uint8Array(instance.exports.memory.buffer);
		heap.set(bytes(vertex_positions), sp);
		heap.set(bytes(vertex_attributes), sa);
		heap.set(bytes(attribute_weights), sw);
		heap.set(bytes(indices), si);
		if (vertex_lock) {
			heap.set(bytes(vertex_lock), vl);
		}
		var result = fun(
			ti,
			si,
			index_count,
			sp,
			vertex_count,
			vertex_positions_stride,
			sa,
			vertex_attributes_stride,
			sw,
			attribute_weights.length,
			vl,
			target_index_count,
			target_error,
			options,
			te
		);
		// heap may have grown
		heap = new Uint8Array(instance.exports.memory.buffer);
		var target = new Uint32Array(result);
		bytes(target).set(heap.subarray(ti, ti + result * 4));
		var error = new Float32Array(1);
		bytes(error).set(heap.subarray(te, te + 4));
		sbrk(te - sbrk(0));
		return [target, error[0]];
	}

	function simplifyUpdate(
		fun,
		indices,
		index_count,
		vertex_positions,
		vertex_count,
		vertex_positions_stride,
		vertex_attributes,
		vertex_attributes_stride,
		attribute_weights,
		vertex_lock,
		target_index_count,
		target_error,
		options
	) {
		var sbrk = instance.exports.sbrk;
		var te = sbrk(4);
		var sp = sbrk(vertex_count * vertex_positions_stride);
		var sa = sbrk(vertex_count * vertex_attributes_stride);
		var sw = sbrk(attribute_weights.length * 4);
		var si = sbrk(index_count * 4);
		var vl = vertex_lock ? sbrk(vertex_count) : 0;
		var heap = new Uint8Array(instance.exports.memory.buffer);
		heap.set(bytes(vertex_positions), sp);
		heap.set(bytes(vertex_attributes), sa);
		heap.set(bytes(attribute_weights), sw);
		heap.set(bytes(indices), si);
		if (vertex_lock) {
			heap.set(bytes(vertex_lock), vl);
		}
		var result = fun(
			si,
			index_count,
			sp,
			vertex_count,
			vertex_positions_stride,
			sa,
			vertex_attributes_stride,
			sw,
			attribute_weights.length,
			vl,
			target_index_count,
			target_error,
			options,
			te
		);
		// heap may have grown
		heap = new Uint8Array(instance.exports.memory.buffer);
		bytes(indices).set(heap.subarray(si, si + result * 4));
		bytes(vertex_positions).set(heap.subarray(sp, sp + vertex_count * vertex_positions_stride));
		bytes(vertex_attributes).set(heap.subarray(sa, sa + vertex_count * vertex_attributes_stride));
		var error = new Float32Array(1);
		bytes(error).set(heap.subarray(te, te + 4));
		sbrk(te - sbrk(0));
		return [result, error[0]];
	}

	function simplifyScale(fun, vertex_positions, vertex_count, vertex_positions_stride) {
		var sbrk = instance.exports.sbrk;
		var sp = sbrk(vertex_count * vertex_positions_stride);
		var heap = new Uint8Array(instance.exports.memory.buffer);
		heap.set(bytes(vertex_positions), sp);
		var result = fun(sp, vertex_count, vertex_positions_stride);
		sbrk(sp - sbrk(0));
		return result;
	}

	function simplifyPoints(
		fun,
		vertex_positions,
		vertex_count,
		vertex_positions_stride,
		vertex_colors,
		vertex_colors_stride,
		color_weight,
		target_vertex_count
	) {
		var sbrk = instance.exports.sbrk;
		var ti = sbrk(target_vertex_count * 4);
		var sp = sbrk(vertex_count * vertex_positions_stride);
		var sc = sbrk(vertex_count * vertex_colors_stride);
		var heap = new Uint8Array(instance.exports.memory.buffer);
		heap.set(bytes(vertex_positions), sp);
		if (vertex_colors) {
			heap.set(bytes(vertex_colors), sc);
		}
		var result = fun(ti, sp, vertex_count, vertex_positions_stride, sc, vertex_colors_stride, color_weight, target_vertex_count);
		// heap may have grown
		heap = new Uint8Array(instance.exports.memory.buffer);
		var target = new Uint32Array(result);
		bytes(target).set(heap.subarray(ti, ti + result * 4));
		sbrk(ti - sbrk(0));
		return target;
	}

	function simplifySloppy(
		fun,
		indices,
		index_count,
		vertex_positions,
		vertex_count,
		vertex_positions_stride,
		vertex_lock,
		target_index_count,
		target_error
	) {
		var sbrk = instance.exports.sbrk;
		var te = sbrk(4);
		var ti = sbrk(index_count * 4);
		var sp = sbrk(vertex_count * vertex_positions_stride);
		var si = sbrk(index_count * 4);
		var vl = vertex_lock ? sbrk(vertex_count) : 0;
		var heap = new Uint8Array(instance.exports.memory.buffer);
		heap.set(bytes(vertex_positions), sp);
		heap.set(bytes(indices), si);
		if (vertex_lock) {
			heap.set(bytes(vertex_lock), vl);
		}
		var result = fun(ti, si, index_count, sp, vertex_count, vertex_positions_stride, vl, target_index_count, target_error, te);
		// heap may have grown
		heap = new Uint8Array(instance.exports.memory.buffer);
		var target = new Uint32Array(result);
		bytes(target).set(heap.subarray(ti, ti + result * 4));
		var error = new Float32Array(1);
		bytes(error).set(heap.subarray(te, te + 4));
		sbrk(te - sbrk(0));
		return [target, error[0]];
	}

	function simplifyPrune(fun, indices, index_count, vertex_positions, vertex_count, vertex_positions_stride, target_error) {
		var sbrk = instance.exports.sbrk;
		var ti = sbrk(index_count * 4);
		var sp = sbrk(vertex_count * vertex_positions_stride);
		var si = sbrk(index_count * 4);
		var heap = new Uint8Array(instance.exports.memory.buffer);
		heap.set(bytes(vertex_positions), sp);
		heap.set(bytes(indices), si);
		var result = fun(ti, si, index_count, sp, vertex_count, vertex_positions_stride, target_error);
		// heap may have grown
		heap = new Uint8Array(instance.exports.memory.buffer);
		var target = new Uint32Array(result);
		bytes(target).set(heap.subarray(ti, ti + result * 4));
		sbrk(ti - sbrk(0));
		return target;
	}

	var simplifyOptions = {
		LockBorder: 1,
		Sparse: 2,
		ErrorAbsolute: 4,
		Prune: 8,
		Regularize: 16,
		Permissive: 32,
		_InternalDebug: 1 << 30, // internal, don't use!
	};

	return {
		ready: ready,
		supported: true,

		compactMesh: function (indices) {
			assert(
				indices instanceof Uint32Array || indices instanceof Int32Array || indices instanceof Uint16Array || indices instanceof Int16Array
			);
			assert(indices.length % 3 == 0);

			var indices32 = indices.BYTES_PER_ELEMENT == 4 ? indices : new Uint32Array(indices);
			return reorder(instance.exports.meshopt_optimizeVertexFetchRemap, indices32, maxindex(indices) + 1);
		},

		simplify: function (indices, vertex_positions, vertex_positions_stride, target_index_count, target_error, flags) {
			assert(
				indices instanceof Uint32Array || indices instanceof Int32Array || indices instanceof Uint16Array || indices instanceof Int16Array
			);
			assert(indices.length % 3 == 0);
			assert(vertex_positions instanceof Float32Array);
			assert(vertex_positions.length % vertex_positions_stride == 0);
			assert(vertex_positions_stride >= 3);
			assert(target_index_count >= 0 && target_index_count <= indices.length);
			assert(target_index_count % 3 == 0);
			assert(target_error >= 0);

			var options = 0;
			for (var i = 0; i < (flags ? flags.length : 0); ++i) {
				assert(flags[i] in simplifyOptions);
				options |= simplifyOptions[flags[i]];
			}

			var indices32 = indices.BYTES_PER_ELEMENT == 4 ? indices : new Uint32Array(indices);
			var result = simplify(
				instance.exports.meshopt_simplify,
				indices32,
				indices.length,
				vertex_positions,
				vertex_positions.length / vertex_positions_stride,
				vertex_positions_stride * 4,
				target_index_count,
				target_error,
				options
			);
			result[0] = indices instanceof Uint32Array ? result[0] : new indices.constructor(result[0]);

			return result;
		},

		simplifyWithAttributes: function (
			indices,
			vertex_positions,
			vertex_positions_stride,
			vertex_attributes,
			vertex_attributes_stride,
			attribute_weights,
			vertex_lock,
			target_index_count,
			target_error,
			flags
		) {
			assert(
				indices instanceof Uint32Array || indices instanceof Int32Array || indices instanceof Uint16Array || indices instanceof Int16Array
			);
			assert(indices.length % 3 == 0);
			assert(vertex_positions instanceof Float32Array);
			assert(vertex_positions.length % vertex_positions_stride == 0);
			assert(vertex_positions_stride >= 3);
			assert(vertex_attributes instanceof Float32Array);
			assert(vertex_attributes.length == vertex_attributes_stride * (vertex_positions.length / vertex_positions_stride));
			assert(vertex_attributes_stride >= 0);
			assert(vertex_lock == null || vertex_lock instanceof Uint8Array);
			assert(vertex_lock == null || vertex_lock.length == vertex_positions.length / vertex_positions_stride);
			assert(target_index_count >= 0 && target_index_count <= indices.length);
			assert(target_index_count % 3 == 0);
			assert(target_error >= 0);
			assert(Array.isArray(attribute_weights));
			assert(vertex_attributes_stride >= attribute_weights.length);
			assert(attribute_weights.length <= 32);
			for (var i = 0; i < attribute_weights.length; ++i) {
				assert(attribute_weights[i] >= 0);
			}

			var options = 0;
			for (var i = 0; i < (flags ? flags.length : 0); ++i) {
				assert(flags[i] in simplifyOptions);
				options |= simplifyOptions[flags[i]];
			}

			var indices32 = indices.BYTES_PER_ELEMENT == 4 ? indices : new Uint32Array(indices);
			var result = simplifyAttr(
				instance.exports.meshopt_simplifyWithAttributes,
				indices32,
				indices.length,
				vertex_positions,
				vertex_positions.length / vertex_positions_stride,
				vertex_positions_stride * 4,
				vertex_attributes,
				vertex_attributes_stride * 4,
				new Float32Array(attribute_weights),
				vertex_lock,
				target_index_count,
				target_error,
				options
			);
			result[0] = indices instanceof Uint32Array ? result[0] : new indices.constructor(result[0]);

			return result;
		},

		simplifyWithUpdate: function (
			indices,
			vertex_positions,
			vertex_positions_stride,
			vertex_attributes,
			vertex_attributes_stride,
			attribute_weights,
			vertex_lock,
			target_index_count,
			target_error,
			flags
		) {
			assert(
				indices instanceof Uint32Array || indices instanceof Int32Array || indices instanceof Uint16Array || indices instanceof Int16Array
			);
			assert(indices.length % 3 == 0);
			assert(vertex_positions instanceof Float32Array);
			assert(vertex_positions.length % vertex_positions_stride == 0);
			assert(vertex_positions_stride >= 3);
			assert(vertex_attributes instanceof Float32Array);
			assert(vertex_attributes.length == vertex_attributes_stride * (vertex_positions.length / vertex_positions_stride));
			assert(vertex_attributes_stride >= 0);
			assert(vertex_lock == null || vertex_lock instanceof Uint8Array);
			assert(vertex_lock == null || vertex_lock.length == vertex_positions.length / vertex_positions_stride);
			assert(target_index_count >= 0 && target_index_count <= indices.length);
			assert(target_index_count % 3 == 0);
			assert(target_error >= 0);
			assert(Array.isArray(attribute_weights));
			assert(vertex_attributes_stride >= attribute_weights.length);
			assert(attribute_weights.length <= 32);
			for (var i = 0; i < attribute_weights.length; ++i) {
				assert(attribute_weights[i] >= 0);
			}

			var options = 0;
			for (var i = 0; i < (flags ? flags.length : 0); ++i) {
				assert(flags[i] in simplifyOptions);
				options |= simplifyOptions[flags[i]];
			}

			var indices32 = indices.BYTES_PER_ELEMENT == 4 ? indices : new Uint32Array(indices);
			var result = simplifyUpdate(
				instance.exports.meshopt_simplifyWithUpdate,
				indices32,
				indices.length,
				vertex_positions,
				vertex_positions.length / vertex_positions_stride,
				vertex_positions_stride * 4,
				vertex_attributes,
				vertex_attributes_stride * 4,
				new Float32Array(attribute_weights),
				vertex_lock,
				target_index_count,
				target_error,
				options
			);
			if (indices !== indices32) {
				// copy back indices if they were converted to Uint32Array
				for (var i = 0; i < result[0]; ++i) {
					indices[i] = indices32[i];
				}
			}
			return result;
		},

		getScale: function (vertex_positions, vertex_positions_stride) {
			assert(vertex_positions instanceof Float32Array);
			assert(vertex_positions.length % vertex_positions_stride == 0);
			assert(vertex_positions_stride >= 3);
			return simplifyScale(
				instance.exports.meshopt_simplifyScale,
				vertex_positions,
				vertex_positions.length / vertex_positions_stride,
				vertex_positions_stride * 4
			);
		},

		simplifyPoints: function (vertex_positions, vertex_positions_stride, target_vertex_count, vertex_colors, vertex_colors_stride, color_weight) {
			assert(vertex_positions instanceof Float32Array);
			assert(vertex_positions.length % vertex_positions_stride == 0);
			assert(vertex_positions_stride >= 3);
			assert(target_vertex_count >= 0 && target_vertex_count <= vertex_positions.length / vertex_positions_stride);
			if (vertex_colors) {
				assert(vertex_colors instanceof Float32Array);
				assert(vertex_colors.length % vertex_colors_stride == 0);
				assert(vertex_colors_stride >= 3);
				assert(vertex_positions.length / vertex_positions_stride == vertex_colors.length / vertex_colors_stride);
				return simplifyPoints(
					instance.exports.meshopt_simplifyPoints,
					vertex_positions,
					vertex_positions.length / vertex_positions_stride,
					vertex_positions_stride * 4,
					vertex_colors,
					vertex_colors_stride * 4,
					color_weight,
					target_vertex_count
				);
			} else {
				return simplifyPoints(
					instance.exports.meshopt_simplifyPoints,
					vertex_positions,
					vertex_positions.length / vertex_positions_stride,
					vertex_positions_stride * 4,
					undefined,
					0,
					0,
					target_vertex_count
				);
			}
		},

		simplifySloppy: function (indices, vertex_positions, vertex_positions_stride, vertex_lock, target_index_count, target_error) {
			assert(
				indices instanceof Uint32Array || indices instanceof Int32Array || indices instanceof Uint16Array || indices instanceof Int16Array
			);
			assert(indices.length % 3 == 0);
			assert(vertex_positions instanceof Float32Array);
			assert(vertex_positions.length % vertex_positions_stride == 0);
			assert(vertex_positions_stride >= 3);
			assert(vertex_lock == null || vertex_lock instanceof Uint8Array);
			assert(vertex_lock == null || vertex_lock.length == vertex_positions.length / vertex_positions_stride);
			assert(target_index_count >= 0 && target_index_count <= indices.length);
			assert(target_index_count % 3 == 0);
			assert(target_error >= 0);

			var indices32 = indices.BYTES_PER_ELEMENT == 4 ? indices : new Uint32Array(indices);
			var result = simplifySloppy(
				instance.exports.meshopt_simplifySloppy,
				indices32,
				indices.length,
				vertex_positions,
				vertex_positions.length / vertex_positions_stride,
				vertex_positions_stride * 4,
				vertex_lock,
				target_index_count,
				target_error
			);
			result[0] = indices instanceof Uint32Array ? result[0] : new indices.constructor(result[0]);

			return result;
		},

		simplifyPrune: function (indices, vertex_positions, vertex_positions_stride, target_error) {
			assert(
				indices instanceof Uint32Array || indices instanceof Int32Array || indices instanceof Uint16Array || indices instanceof Int16Array
			);
			assert(indices.length % 3 == 0);
			assert(vertex_positions instanceof Float32Array);
			assert(vertex_positions.length % vertex_positions_stride == 0);
			assert(vertex_positions_stride >= 3);
			assert(target_error >= 0);

			var indices32 = indices.BYTES_PER_ELEMENT == 4 ? indices : new Uint32Array(indices);
			var result = simplifyPrune(
				instance.exports.meshopt_simplifyPrune,
				indices32,
				indices.length,
				vertex_positions,
				vertex_positions.length / vertex_positions_stride,
				vertex_positions_stride * 4,
				target_error
			);
			result = indices instanceof Uint32Array ? result : new indices.constructor(result);

			return result;
		},
	};
})();

// export! MeshoptSimplifier
if (typeof exports === 'object' && typeof module === 'object') module.exports = MeshoptSimplifier;
else if (typeof define === 'function' && define['amd'])
	define([], function () {
		return MeshoptSimplifier;
	});
else if (typeof exports === 'object') exports['MeshoptSimplifier'] = MeshoptSimplifier;
else (typeof self !== 'undefined' ? self : this).MeshoptSimplifier = MeshoptSimplifier;
